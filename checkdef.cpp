#include <stdexcept>
#include <iostream>
#include <fstream>

enum error_code
{
	OK=0,
	WA=2,
	PE=4,
	UN=100
};

error_code check_LN(std::ifstream &in)
{
	char c;
	while (in.get(c))
	{
		if (c!='\n')
			return WA;
	}
	return OK;
}

int main(int argc, char **argv)
{
	try
	{
		if (argc!=3+1)
			throw std::invalid_argument("wrong argument count");
		// input file [it is useless, so we don't create it]
		/*std::ifstream in(argv[1]);
		if (!in.good())
			throw std::ios_base::failure("bad file: \""+std::string(argv[1])+"\"");
		in.exceptions(std::ifstream::failbit | std::ifstream::badbit);*/
		// output file
		std::ifstream out(argv[2]);
		if (!out.good())
			throw std::ios_base::failure("bad file: \""+std::string(argv[2])+"\"");
		out.exceptions(std::ifstream::failbit | std::ifstream::badbit);
		// correct output file
		std::ifstream cout(argv[3]);
		if (!cout.good())
			throw std::ios_base::failure("bad file: \""+std::string(argv[3])+"\"");
		cout.exceptions(std::ifstream::failbit | std::ifstream::badbit);
		// read all symbols and compare
		char o, c;
		while (out.get(o) && cout.get(c))
			if (o!=c)
				return WA;
		if (out.eof() && cout.eof())
			return OK;
		else
		{
			if (out.eof())
				return check_LN(cout);
			else
				return check_LN(out);
		}
	}
	catch (std::ios_base::failure &e)
	{
		std::cerr<<"File error: "<<e.what()<<std::endl;
		return UN;
	}
	catch (std::exception &e)
	{
		std::cerr<<"Error: "<<e.what()<<std::endl;
		std::cerr<<"Usage: checkdef <input file> <output file generated by solution> <correct output file>"<<std::endl<<std::endl;
		std::cerr<<"Return codes:"<<std::endl;
		std::cerr<<"\t"<<OK<<" - OK"<<std::endl
			<<"\t"<<WA<<" - Wrong Answer"<<std::endl
			<<"\t"<<PE<<" - Presentation Error"<<std::endl
			<<"\t"<<UN<<" - Invalid parameters or check error"<<std::endl;
		return UN;
	}
}

